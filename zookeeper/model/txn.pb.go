// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/txn.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TxnHeader struct {
	ClientId int64 `protobuf:"varint,1,opt,name=clientId" json:"clientId,omitempty"`
	Cxid     int32 `protobuf:"varint,2,opt,name=cxid" json:"cxid,omitempty"`
	Zxid     int64 `protobuf:"varint,3,opt,name=zxid" json:"zxid,omitempty"`
	Time     int64 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Type     int32 `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
}

func (m *TxnHeader) Reset()                    { *m = TxnHeader{} }
func (m *TxnHeader) String() string            { return proto.CompactTextString(m) }
func (*TxnHeader) ProtoMessage()               {}
func (*TxnHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *TxnHeader) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *TxnHeader) GetCxid() int32 {
	if m != nil {
		return m.Cxid
	}
	return 0
}

func (m *TxnHeader) GetZxid() int64 {
	if m != nil {
		return m.Zxid
	}
	return 0
}

func (m *TxnHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TxnHeader) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CreateTxnV0 struct {
	Path      string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Acl       []*ACL `protobuf:"bytes,3,rep,name=acl" json:"acl,omitempty"`
	Ephemeral bool   `protobuf:"varint,4,opt,name=ephemeral" json:"ephemeral,omitempty"`
}

func (m *CreateTxnV0) Reset()                    { *m = CreateTxnV0{} }
func (m *CreateTxnV0) String() string            { return proto.CompactTextString(m) }
func (*CreateTxnV0) ProtoMessage()               {}
func (*CreateTxnV0) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CreateTxnV0) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateTxnV0) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTxnV0) GetAcl() []*ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *CreateTxnV0) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

type CreateTxn struct {
	Path           string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Data           []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Acl            []*ACL `protobuf:"bytes,3,rep,name=acl" json:"acl,omitempty"`
	Ephemeral      bool   `protobuf:"varint,4,opt,name=ephemeral" json:"ephemeral,omitempty"`
	ParentCVersion int32  `protobuf:"varint,5,opt,name=parentCVersion" json:"parentCVersion,omitempty"`
}

func (m *CreateTxn) Reset()                    { *m = CreateTxn{} }
func (m *CreateTxn) String() string            { return proto.CompactTextString(m) }
func (*CreateTxn) ProtoMessage()               {}
func (*CreateTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *CreateTxn) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateTxn) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTxn) GetAcl() []*ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *CreateTxn) GetEphemeral() bool {
	if m != nil {
		return m.Ephemeral
	}
	return false
}

func (m *CreateTxn) GetParentCVersion() int32 {
	if m != nil {
		return m.ParentCVersion
	}
	return 0
}

type DeleteTxn struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *DeleteTxn) Reset()                    { *m = DeleteTxn{} }
func (m *DeleteTxn) String() string            { return proto.CompactTextString(m) }
func (*DeleteTxn) ProtoMessage()               {}
func (*DeleteTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DeleteTxn) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SetDataTxn struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *SetDataTxn) Reset()                    { *m = SetDataTxn{} }
func (m *SetDataTxn) String() string            { return proto.CompactTextString(m) }
func (*SetDataTxn) ProtoMessage()               {}
func (*SetDataTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *SetDataTxn) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SetDataTxn) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SetDataTxn) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CheckVersionTxn struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *CheckVersionTxn) Reset()                    { *m = CheckVersionTxn{} }
func (m *CheckVersionTxn) String() string            { return proto.CompactTextString(m) }
func (*CheckVersionTxn) ProtoMessage()               {}
func (*CheckVersionTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *CheckVersionTxn) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CheckVersionTxn) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SetACLTxn struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Acl     []*ACL `protobuf:"bytes,2,rep,name=acl" json:"acl,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *SetACLTxn) Reset()                    { *m = SetACLTxn{} }
func (m *SetACLTxn) String() string            { return proto.CompactTextString(m) }
func (*SetACLTxn) ProtoMessage()               {}
func (*SetACLTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *SetACLTxn) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SetACLTxn) GetAcl() []*ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *SetACLTxn) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SetMaxChildrenTxn struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Max  int32  `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *SetMaxChildrenTxn) Reset()                    { *m = SetMaxChildrenTxn{} }
func (m *SetMaxChildrenTxn) String() string            { return proto.CompactTextString(m) }
func (*SetMaxChildrenTxn) ProtoMessage()               {}
func (*SetMaxChildrenTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *SetMaxChildrenTxn) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SetMaxChildrenTxn) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type CreateSessionTxn struct {
	TimeOut int32 `protobuf:"varint,1,opt,name=timeOut" json:"timeOut,omitempty"`
}

func (m *CreateSessionTxn) Reset()                    { *m = CreateSessionTxn{} }
func (m *CreateSessionTxn) String() string            { return proto.CompactTextString(m) }
func (*CreateSessionTxn) ProtoMessage()               {}
func (*CreateSessionTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *CreateSessionTxn) GetTimeOut() int32 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

type ErrorTxn struct {
	Err int32 `protobuf:"varint,1,opt,name=err" json:"err,omitempty"`
}

func (m *ErrorTxn) Reset()                    { *m = ErrorTxn{} }
func (m *ErrorTxn) String() string            { return proto.CompactTextString(m) }
func (*ErrorTxn) ProtoMessage()               {}
func (*ErrorTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *ErrorTxn) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

type Txn struct {
	Type int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Txn) Reset()                    { *m = Txn{} }
func (m *Txn) String() string            { return proto.CompactTextString(m) }
func (*Txn) ProtoMessage()               {}
func (*Txn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *Txn) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Txn) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MultiTxn struct {
	Txns []*Txn `protobuf:"bytes,1,rep,name=txns" json:"txns,omitempty"`
}

func (m *MultiTxn) Reset()                    { *m = MultiTxn{} }
func (m *MultiTxn) String() string            { return proto.CompactTextString(m) }
func (*MultiTxn) ProtoMessage()               {}
func (*MultiTxn) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *MultiTxn) GetTxns() []*Txn {
	if m != nil {
		return m.Txns
	}
	return nil
}

func init() {
	proto.RegisterType((*TxnHeader)(nil), "model.TxnHeader")
	proto.RegisterType((*CreateTxnV0)(nil), "model.CreateTxnV0")
	proto.RegisterType((*CreateTxn)(nil), "model.CreateTxn")
	proto.RegisterType((*DeleteTxn)(nil), "model.DeleteTxn")
	proto.RegisterType((*SetDataTxn)(nil), "model.SetDataTxn")
	proto.RegisterType((*CheckVersionTxn)(nil), "model.CheckVersionTxn")
	proto.RegisterType((*SetACLTxn)(nil), "model.SetACLTxn")
	proto.RegisterType((*SetMaxChildrenTxn)(nil), "model.SetMaxChildrenTxn")
	proto.RegisterType((*CreateSessionTxn)(nil), "model.CreateSessionTxn")
	proto.RegisterType((*ErrorTxn)(nil), "model.ErrorTxn")
	proto.RegisterType((*Txn)(nil), "model.Txn")
	proto.RegisterType((*MultiTxn)(nil), "model.MultiTxn")
}

func init() { proto.RegisterFile("model/txn.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xba, 0x61, 0xc9, 0x1b, 0x62, 0x21, 0x27, 0x6b, 0xaa, 0xa0, 0xf2, 0x01, 0x55,
	0x08, 0x0a, 0x82, 0x13, 0x27, 0x34, 0x65, 0x48, 0x20, 0x6d, 0x20, 0x39, 0xd5, 0x38, 0x9b, 0xe4,
	0x49, 0x89, 0x48, 0x9c, 0xe0, 0x7a, 0x60, 0xf8, 0x47, 0xf8, 0x77, 0x91, 0x5f, 0xd2, 0x8d, 0xa2,
	0xe6, 0xc0, 0x65, 0xb7, 0xcf, 0xbf, 0xbe, 0xe7, 0xef, 0xf3, 0xeb, 0x0b, 0x9c, 0xb4, 0x5d, 0x89,
	0xcd, 0x0b, 0xeb, 0xf4, 0xba, 0x37, 0x9d, 0xed, 0xd2, 0x90, 0xc0, 0x69, 0x32, 0xf0, 0x52, 0x59,
	0x35, 0xfc, 0x20, 0x7e, 0x40, 0xbc, 0x71, 0xfa, 0x3d, 0xaa, 0x12, 0x4d, 0x7a, 0x0a, 0x51, 0xd1,
	0xd4, 0xa8, 0xed, 0x87, 0x92, 0x07, 0xcb, 0x60, 0xc5, 0xe4, 0xcd, 0x39, 0x4d, 0x61, 0x5e, 0xb8,
	0xba, 0xe4, 0xb3, 0x65, 0xb0, 0x0a, 0x25, 0x69, 0xcf, 0x7e, 0x79, 0xc6, 0xa8, 0x96, 0xb4, 0x67,
	0xb6, 0x6e, 0x91, 0xcf, 0x07, 0xe6, 0x35, 0xb1, 0x9f, 0x3d, 0xf2, 0x70, 0xe8, 0xf5, 0x5a, 0x7c,
	0x83, 0xe3, 0xcc, 0xa0, 0xb2, 0xb8, 0x71, 0xfa, 0xea, 0xa5, 0x2f, 0xe9, 0x95, 0xad, 0xc8, 0x36,
	0x96, 0xa4, 0x3d, 0xf3, 0x49, 0xc9, 0xf2, 0xbe, 0x24, 0x9d, 0x2e, 0x80, 0xa9, 0xa2, 0xe1, 0x6c,
	0xc9, 0x56, 0xc7, 0xaf, 0x60, 0x4d, 0xef, 0x59, 0x9f, 0x65, 0x17, 0xd2, 0xe3, 0x74, 0x01, 0x31,
	0xf6, 0x15, 0xb6, 0x68, 0x54, 0x43, 0x09, 0x22, 0x79, 0x0b, 0xc4, 0xef, 0x00, 0xe2, 0x1b, 0xcf,
	0xbb, 0x70, 0x4c, 0x9f, 0xc0, 0x83, 0x5e, 0x19, 0xd4, 0x36, 0xbb, 0x42, 0xb3, 0xad, 0x3b, 0x3d,
	0x8e, 0xe0, 0x1f, 0x2a, 0x1e, 0x43, 0x7c, 0x8e, 0x0d, 0x4e, 0x06, 0x13, 0x1f, 0x01, 0x72, 0xb4,
	0xe7, 0xca, 0xaa, 0xff, 0x89, 0xce, 0xe1, 0xe8, 0xfb, 0xe8, 0xcb, 0xc8, 0x77, 0x77, 0x14, 0x6f,
	0xe1, 0x24, 0xab, 0xb0, 0xf8, 0x3a, 0x06, 0x98, 0xba, 0xf4, 0xaf, 0x0b, 0x66, 0xfb, 0x17, 0x7c,
	0x86, 0x38, 0x47, 0x7b, 0x96, 0x5d, 0x4c, 0xb5, 0x8e, 0x63, 0x9b, 0x1d, 0x1e, 0xdb, 0x74, 0xb2,
	0x37, 0xf0, 0x30, 0x47, 0x7b, 0xa9, 0x5c, 0x56, 0xd5, 0x4d, 0x69, 0x70, 0x32, 0x5b, 0x02, 0xac,
	0x55, 0x6e, 0xcc, 0xe5, 0xa5, 0x78, 0x06, 0xc9, 0xf0, 0xf7, 0xe6, 0xb8, 0xdd, 0xbd, 0x8a, 0xc3,
	0x91, 0x5f, 0xc1, 0x4f, 0xd7, 0x96, 0x9a, 0x43, 0xb9, 0x3b, 0x8a, 0x05, 0x44, 0xef, 0x8c, 0xe9,
	0x8c, 0xaf, 0x4a, 0x80, 0xa1, 0x31, 0x63, 0x85, 0x97, 0xe2, 0x39, 0xb0, 0xd1, 0x98, 0x36, 0x37,
	0xb8, 0xdd, 0xdc, 0x43, 0x93, 0x16, 0x4f, 0x21, 0xba, 0xbc, 0x6e, 0x6c, 0xed, 0x7b, 0x1e, 0xc1,
	0xdc, 0x3a, 0xbd, 0xe5, 0xc1, 0xde, 0xd3, 0x37, 0x4e, 0x4b, 0xe2, 0x5f, 0xee, 0xd1, 0x97, 0xf7,
	0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x12, 0xa2, 0xac, 0xa5, 0x03, 0x00, 0x00,
}
